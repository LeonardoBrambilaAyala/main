#lang racket

(define pi 3.14)

(define (Segundo)
  (define (area-cicle radio)
    (* pi (* radio radio)))
  (display "Segundo: ")
  (display (area-cicle 5)))
(Segundo)
(newline)

(define (Tercero)
  (define (area-cicle radio)
    (* pi (* radio radio)))
  
  (define (circle-properties radio)
    (list (* pi (* radio radio)) (* 2 pi radio)))
  ;(display (area-cicle 5))
  (display "Tercero: ")
  (display (circle-properties 5)))
(Tercero)

(define (Cuarto)
  (define (rectangle-properties aux)
    (define largo (car aux))
    (define ancho (cadr aux))
    (define area (* largo ancho))
    (define perimetro (* 2 (+ largo ancho)))
    (list area perimetro))
  (display "Cuarto: ")
  (display (rectangle-properties '(2 4))))
(newline)
(Cuarto)

(define (Quinta)
  (define (find-needle t)
    (cond ((eq? (car t) 'needle) 0)
          ((eq? (cadr t)'needle) 1)
          (else -1)))
  (display "Qinta: ")
  (display (find-needle '(hay needle hay)))
  (display (find-needle '(hay hay hay))))
(newline)
(Quinta)

(define (Sexta)
  (define x -5)
  (display "Sexta: ")
  (display (abs x)))
(newline)
(Sexta)

(define (Septima)
  (define (elementos lista)
    (map (lambda (aux) (+ aux 1)) lista))
  (define lst-1 '(1 2 3))
  (define lst-2 (elementos lst-1))
  (display "Septima: ")
  (display lst-2))
(newline)
(Septima)

(define (Octava)
  (define lst-1 '(1 2 3 4 5 6))
  (define aux (map even? lst-1))
  (display "Octava: ")
  (display aux))
(newline)
(Octava)


(define (Novena)
  (define another-add
    (lambda (n m)
      (cond
        [(zero? n) m]
        [else (add1 (another-add (sub1 n) m))])))
  (display "Novena: ")
  (display (another-add 0 3)))
(newline)
(Novena)